"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _backendlessRequest = _interopRequireDefault(require("backendless-request"));

var isUndefined = function isUndefined(value) {
  return typeof value === 'undefined';
};

var isString = function isString(value) {
  return typeof value === 'string';
};

var isFunction = function isFunction(value) {
  return typeof value === 'function';
};

var isObject = function isObject(value) {
  return (0, _typeof2["default"])(value) === 'object' && value !== null;
};

var RTConfig = /*#__PURE__*/function () {
  function RTConfig(config) {
    (0, _classCallCheck2["default"])(this, RTConfig);
    this.appId = null;
    this.lookupPath = null;
    this.lookupHeaders = {};
    this.debugMode = false;
    this.connectQuery = {};
    this.socketConfigTransform = null;
    this.socketConfig = null;
    this.set(config);
  }

  (0, _createClass2["default"])(RTConfig, [{
    key: "set",
    value: function set(config) {
      if (!config) {
        return;
      }

      if (!isUndefined(config.appId)) {
        if (!isString(config.appId)) {
          throw new Error('"appId" must be String.');
        }

        this.appId = config.appId;
      }

      if (!isUndefined(config.lookupPath)) {
        if (!isString(config.lookupPath)) {
          throw new Error('"lookupPath" must be String.');
        }

        this.lookupPath = config.lookupPath;
      }

      if (!isUndefined(config.lookupHeaders)) {
        if (!isObject(config.lookupHeaders)) {
          throw new Error('"lookupHeaders" must be Object.');
        }

        this.lookupHeaders = config.lookupHeaders;
      }

      if (!isUndefined(config.debugMode)) {
        this.debugMode = !!config.debugMode;
      }

      if (!isUndefined(config.connectQuery)) {
        if (isFunction(config.connectQuery)) {
          this.getConnectQuery = config.connectQuery;
        } else if (isObject(config.connectQuery)) {
          this.connectQuery = config.connectQuery;
        } else {
          throw new Error('"connectQuery" must be Function or Object.');
        }
      }

      if (!isUndefined(config.socketConfigTransform)) {
        if (isFunction(config.socketConfigTransform)) {
          this.socketConfigTransform = config.socketConfigTransform;
        } else {
          throw new Error('"socketConfigTransform" must be Function.');
        }
      }
    }
  }, {
    key: "getConnectQuery",
    value: function getConnectQuery() {
      return this.connectQuery;
    }
  }, {
    key: "prepare",
    value: function () {
      var _prepare = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var host, url, path, query, socketConfig;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (isString(this.lookupPath)) {
                  _context.next = 2;
                  break;
                }

                throw new Error('lookupPath must be String');

              case 2:
                _context.next = 4;
                return _backendlessRequest["default"].get(this.lookupPath).set(this.lookupHeaders);

              case 4:
                host = _context.sent;
                url = this.appId ? "".concat(host, "/").concat(this.appId) : host;
                path = this.appId ? "/".concat(this.appId) : undefined;
                query = this.getConnectQuery();
                this.socketConfig = {
                  host: host,
                  url: url,
                  options: {
                    path: path,
                    query: query,
                    forceNew: true,
                    autoConnect: false,
                    reconnection: false
                  }
                };

                if (!this.socketConfigTransform) {
                  _context.next = 14;
                  break;
                }

                _context.next = 12;
                return this.socketConfigTransform(this.socketConfig);

              case 12:
                socketConfig = _context.sent;

                if (socketConfig) {
                  this.socketConfig = socketConfig;
                }

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function prepare() {
        return _prepare.apply(this, arguments);
      }

      return prepare;
    }()
  }, {
    key: "getSocketConfig",
    value: function getSocketConfig() {
      return this.socketConfig;
    }
  }]);
  return RTConfig;
}();

exports["default"] = RTConfig;