"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _constants = require("./constants");

var RTSocket = /*#__PURE__*/function () {
  function RTSocket(config, host) {
    (0, _classCallCheck2["default"])(this, RTSocket);

    var io = require('socket.io-client');

    this.config = config;
    this.events = {};

    var _config$getSocketConf = config.getSocketConfig(),
        url = _config$getSocketConf.url,
        options = _config$getSocketConf.options;

    this.ioSocket = io(url, options);
  }

  (0, _createClass2["default"])(RTSocket, [{
    key: "connect",
    value: function connect() {
      this.ioSocket.connect();
    }
  }, {
    key: "close",
    value: function close() {
      this.events = {};
      this.ioSocket.off();
      this.ioSocket.close();
    }
  }, {
    key: "on",
    value: function on(event, callback) {
      var _this = this;

      if (!this.events[event]) {
        this.ioSocket.on(event, function (data) {
          return _this.onEvent(event, data);
        });
      }

      this.events[event] = this.events[event] || [];
      this.events[event].push(callback);
    }
  }, {
    key: "off",
    value: function off(event, callback) {
      this.events[event] = callback ? this.events[event].filter(function (f) {
        return f !== callback;
      }) : [];

      if (!this.events[event].length) {
        delete this.events[event];
      }

      if (!this.events[event]) {
        this.ioSocket.off(event);
      }
    }
  }, {
    key: "onEvent",
    value: function onEvent(event, data) {
      if (this.config.debugMode) {
        logMessage('FROM SERVER', event, data);
      }

      if (this.events[event]) {
        this.events[event].forEach(function (callback) {
          return callback(data);
        });
      }
    }
  }, {
    key: "emit",
    value: function emit(event, data) {
      if (this.config.debugMode) {
        logMessage('TO SERVER', event, data);
      }

      this.ioSocket.emit(event, data);
    }
  }], [{
    key: "connect",
    value: function connect(config, onDisconnect) {
      return Promise.resolve().then(function () {
        return config.prepare();
      }).then(function () {
        return new Promise(function (resolve, reject) {
          var rtSocket = new RTSocket(config);
          rtSocket.on(_constants.NativeSocketEvents.CONNECT, onConnect);
          rtSocket.on(_constants.NativeSocketEvents.CONNECT_ERROR, onError);
          rtSocket.on(_constants.NativeSocketEvents.CONNECT_TIMEOUT, onError);
          rtSocket.on(_constants.NativeSocketEvents.ERROR, onError);
          rtSocket.connect();

          function onConnect() {
            resolve(rtSocket);
          }

          function onError(error) {
            rtSocket.close();
            reject(error);
          }
        });
      }).then(function (rtSocket) {
        rtSocket.on(_constants.NativeSocketEvents.DISCONNECT, onDisconnect);
        return rtSocket;
      });
    }
  }]);
  return RTSocket;
}();

exports["default"] = RTSocket;

function logMessage(type, event, data) {
  // eslint-disable-next-line
  console.log("[".concat(type, "] - [event: ").concat(event, "] - arguments: ").concat(JSON.stringify(data), " "));
}