"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _utils = _interopRequireDefault(require("./utils"));

var _persmission = _interopRequireDefault(require("./persmission"));

var Files = /*#__PURE__*/function () {
  function Files(app) {
    (0, _classCallCheck2["default"])(this, Files);
    this.app = app;
    this.Permissions = {
      READ: new _persmission["default"]('READ', app),
      DELETE: new _persmission["default"]('DELETE', app),
      WRITE: new _persmission["default"]('WRITE', app)
    };
  }

  (0, _createClass2["default"])(Files, [{
    key: "saveFile",
    value: function () {
      var _saveFile = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(filePath, fileName, fileContent, overwrite) {
        var query;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!filePath || typeof filePath !== 'string')) {
                  _context.next = 2;
                  break;
                }

                throw new Error('"filePath" must be provided and must be a string.');

              case 2:
                if (!(!fileName || typeof fileName !== 'string')) {
                  _context.next = 4;
                  break;
                }

                throw new Error('File Name must be provided and must be a string.');

              case 4:
                _context.next = 6;
                return _utils["default"].toBase64(fileContent);

              case 6:
                fileContent = _context.sent;
                query = {};

                if (typeof overwrite === 'boolean') {
                  query.overwrite = overwrite;
                }

                filePath = _utils["default"].trimSlashesInPath(filePath);
                fileName = _utils["default"].sanitizeFileName(fileName);
                return _context.abrupt("return", this.app.request.put({
                  url: "".concat(this.app.urls.fileBinaryPath(filePath), "/").concat(fileName),
                  headers: {
                    'Content-Type': 'text/plain'
                  },
                  query: query,
                  data: fileContent
                }));

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function saveFile(_x, _x2, _x3, _x4) {
        return _saveFile.apply(this, arguments);
      }

      return saveFile;
    }()
  }, {
    key: "upload",
    value: function () {
      var _upload = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(file, filePath, overwrite) {
        var query, pathTokens, fileName, sourcePathTokens;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                query = {};

                if (typeof overwrite === 'boolean') {
                  query.overwrite = overwrite;
                }

                filePath = _utils["default"].trimSlashesInPath(filePath);
                pathTokens = _utils["default"].parseFilePath(filePath);

                if (pathTokens.fileName) {
                  filePath = pathTokens.filePath;
                  fileName = pathTokens.fileName;
                }

                if (!(typeof file === 'string')) {
                  _context2.next = 8;
                  break;
                }

                if (!fileName) {
                  sourcePathTokens = _utils["default"].parseFilePath(file);
                  fileName = sourcePathTokens.fileName;
                }

                return _context2.abrupt("return", this.app.request.post({
                  url: "".concat(this.app.urls.filePath(filePath), "/").concat(fileName),
                  query: query,
                  data: {
                    url: file
                  }
                }));

              case 8:
                if (!fileName) {
                  fileName = _utils["default"].getFileName(file);
                }

                if (fileName) {
                  _context2.next = 11;
                  break;
                }

                throw new Error('Wrong type of the file source object. Can not get file name');

              case 11:
                fileName = _utils["default"].sanitizeFileName(fileName);
                return _context2.abrupt("return", this.app.request.post({
                  url: "".concat(this.app.urls.filePath(filePath), "/").concat(fileName),
                  query: query,
                  form: {
                    file: file
                  }
                }));

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function upload(_x5, _x6, _x7) {
        return _upload.apply(this, arguments);
      }

      return upload;
    }()
  }, {
    key: "append",
    value: function () {
      var _append = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(filePath, fileName, fileContent) {
        var pathTokens,
            _args3 = arguments;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!filePath || typeof filePath !== 'string')) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('"filePath" must be provided and must be a string.');

              case 2:
                filePath = _utils["default"].trimSlashesInPath(filePath);

                if (_args3.length === 2) {
                  fileContent = fileName;
                  fileName = undefined;
                  pathTokens = _utils["default"].parseFilePath(filePath);

                  if (pathTokens.fileName) {
                    filePath = pathTokens.filePath;
                    fileName = pathTokens.fileName;
                  }
                }

                if (fileName) {
                  _context3.next = 6;
                  break;
                }

                throw new Error('Can not resolve target file name');

              case 6:
                fileName = _utils["default"].sanitizeFileName(fileName);

                if (!(typeof fileContent === 'string')) {
                  _context3.next = 9;
                  break;
                }

                return _context3.abrupt("return", this.app.request.post({
                  url: "".concat(this.app.urls.fileAppendPath(filePath), "/").concat(fileName),
                  data: {
                    url: fileContent
                  }
                }));

              case 9:
                if (!_utils["default"].isBytesArray(fileContent)) {
                  _context3.next = 14;
                  break;
                }

                _context3.next = 12;
                return _utils["default"].toBase64(fileContent);

              case 12:
                fileContent = _context3.sent;
                return _context3.abrupt("return", this.app.request.put({
                  url: "".concat(this.app.urls.fileAppendBinaryPath(filePath), "/").concat(fileName),
                  headers: {
                    'Content-Type': 'text/plain'
                  },
                  data: fileContent
                }));

              case 14:
                return _context3.abrupt("return", this.app.request.post({
                  url: "".concat(this.app.urls.fileAppendPath(filePath), "/").concat(fileName),
                  form: {
                    file: fileContent
                  }
                }));

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function append(_x8, _x9, _x10) {
        return _append.apply(this, arguments);
      }

      return append;
    }()
  }, {
    key: "appendText",
    value: function () {
      var _appendText = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(filePath, fileName, textContent) {
        var pathTokens,
            _args4 = arguments;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(!filePath || typeof filePath !== 'string')) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('"filePath" must be provided and must be a string.');

              case 2:
                filePath = _utils["default"].trimSlashesInPath(filePath);

                if (_args4.length === 2) {
                  textContent = fileName;
                  fileName = undefined;
                  pathTokens = _utils["default"].parseFilePath(filePath);

                  if (pathTokens.fileName) {
                    filePath = pathTokens.filePath;
                    fileName = pathTokens.fileName;
                  }
                }

                if (fileName) {
                  _context4.next = 6;
                  break;
                }

                throw new Error('Can not resolve target file name');

              case 6:
                if (!(typeof textContent !== 'string')) {
                  _context4.next = 8;
                  break;
                }

                throw new Error('"textContent" must be a string');

              case 8:
                fileName = _utils["default"].sanitizeFileName(fileName);
                return _context4.abrupt("return", this.app.request.put({
                  url: "".concat(this.app.urls.fileAppendPath(filePath), "/").concat(fileName),
                  headers: {
                    'Content-Type': 'text/plain'
                  },
                  data: textContent
                }));

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function appendText(_x11, _x12, _x13) {
        return _appendText.apply(this, arguments);
      }

      return appendText;
    }()
  }, {
    key: "listing",
    value: function () {
      var _listing = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(filePath, pattern, sub, pagesize, offset) {
        var query;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                query = {};

                if (!(!filePath || typeof filePath !== 'string')) {
                  _context5.next = 3;
                  break;
                }

                throw new Error('"filePath" must be provided and must be a string.');

              case 3:
                filePath = _utils["default"].trimSlashesInPath(filePath);

                if (pattern && typeof pattern === 'string') {
                  query.pattern = pattern;
                }

                if (typeof sub === 'boolean') {
                  query.sub = sub;
                }

                if (typeof pagesize === 'number' && pagesize >= 0) {
                  query.pagesize = pagesize;
                }

                if (typeof offset === 'number' && offset >= 0) {
                  query.offset = offset;
                }

                return _context5.abrupt("return", this.app.request.get({
                  url: this.app.urls.filePath(filePath),
                  query: query
                }));

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function listing(_x14, _x15, _x16, _x17, _x18) {
        return _listing.apply(this, arguments);
      }

      return listing;
    }()
  }, {
    key: "renameFile",
    value: function () {
      var _renameFile = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(oldPathName, newName) {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!(!oldPathName || typeof oldPathName !== 'string')) {
                  _context6.next = 2;
                  break;
                }

                throw new Error('"oldPathName" must be provided and must be a string.');

              case 2:
                if (!(!newName || typeof newName !== 'string')) {
                  _context6.next = 4;
                  break;
                }

                throw new Error('New File Name must be provided and must be a string.');

              case 4:
                return _context6.abrupt("return", this.app.request.put({
                  url: this.app.urls.fileRename(),
                  data: {
                    oldPathName: _utils["default"].ensureSlashInPath(oldPathName),
                    newName: newName
                  }
                }));

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function renameFile(_x19, _x20) {
        return _renameFile.apply(this, arguments);
      }

      return renameFile;
    }()
  }, {
    key: "moveFile",
    value: function () {
      var _moveFile = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(sourcePath, targetPath) {
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", this.app.request.put({
                  url: this.app.urls.fileMove(),
                  data: {
                    sourcePath: _utils["default"].ensureSlashInPath(sourcePath),
                    targetPath: _utils["default"].ensureSlashInPath(targetPath)
                  }
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function moveFile(_x21, _x22) {
        return _moveFile.apply(this, arguments);
      }

      return moveFile;
    }()
  }, {
    key: "copyFile",
    value: function () {
      var _copyFile = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(sourcePath, targetPath) {
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt("return", this.app.request.put({
                  url: this.app.urls.fileCopy(),
                  data: {
                    sourcePath: _utils["default"].ensureSlashInPath(sourcePath),
                    targetPath: _utils["default"].ensureSlashInPath(targetPath)
                  }
                }));

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function copyFile(_x23, _x24) {
        return _copyFile.apply(this, arguments);
      }

      return copyFile;
    }()
  }, {
    key: "remove",
    value: function () {
      var _remove = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9(filePath) {
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(!filePath || typeof filePath !== 'string')) {
                  _context9.next = 2;
                  break;
                }

                throw new Error('"filePath" must be provided and must be a string.');

              case 2:
                if (!filePath.startsWith('http://') && !filePath.startsWith('https://')) {
                  filePath = this.app.urls.filePath(filePath);
                }

                return _context9.abrupt("return", this.app.request["delete"]({
                  url: filePath
                }));

              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function remove(_x25) {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
  }, {
    key: "exists",
    value: function () {
      var _exists = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10(filePath) {
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (!(!filePath || typeof filePath !== 'string')) {
                  _context10.next = 2;
                  break;
                }

                throw new Error('"filePath" must be provided and must be a string.');

              case 2:
                filePath = _utils["default"].trimSlashesInPath(filePath);
                return _context10.abrupt("return", this.app.request.get({
                  url: this.app.urls.filePath(filePath),
                  query: {
                    action: 'exists'
                  }
                }));

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function exists(_x26) {
        return _exists.apply(this, arguments);
      }

      return exists;
    }()
  }, {
    key: "removeDirectory",
    value: function () {
      var _removeDirectory = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11(directoryPath) {
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (!(!directoryPath || typeof directoryPath !== 'string')) {
                  _context11.next = 2;
                  break;
                }

                throw new Error('Directory "path" must be provided and must be a string.');

              case 2:
                directoryPath = _utils["default"].trimSlashesInPath(directoryPath);
                return _context11.abrupt("return", this.app.request["delete"]({
                  url: this.app.urls.filePath(directoryPath)
                }));

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function removeDirectory(_x27) {
        return _removeDirectory.apply(this, arguments);
      }

      return removeDirectory;
    }()
  }, {
    key: "getFileCount",
    value: function () {
      var _getFileCount = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee12(filesPath, pattern, sub, countDirectories) {
        return _regenerator["default"].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (!(!filesPath || typeof filesPath !== 'string')) {
                  _context12.next = 2;
                  break;
                }

                throw new Error('"filesPath" must be provided and must be a string.');

              case 2:
                if (!(pattern && typeof pattern !== 'string')) {
                  _context12.next = 4;
                  break;
                }

                throw new Error('Files Pattern must be provided and must be a string.');

              case 4:
                filesPath = _utils["default"].trimSlashesInPath(filesPath);
                return _context12.abrupt("return", this.app.request.get({
                  url: this.app.urls.filePath(filesPath),
                  query: {
                    action: 'count',
                    pattern: pattern || '*',
                    sub: !!sub,
                    countDirectories: !!countDirectories
                  }
                }));

              case 6:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function getFileCount(_x28, _x29, _x30, _x31) {
        return _getFileCount.apply(this, arguments);
      }

      return getFileCount;
    }()
  }]);
  return Files;
}();

exports["default"] = Files;