"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _constants = require("./constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var CustomServices = /*#__PURE__*/function () {
  function CustomServices(app) {
    (0, _classCallCheck2["default"])(this, CustomServices);
    this.app = app;
  }

  (0, _createClass2["default"])(CustomServices, [{
    key: "invoke",
    value: function () {
      var _invoke = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(serviceName, methodName, parameters, options) {
        var headers;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!serviceName || typeof serviceName !== 'string')) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Service Name must be provided and must be a string.');

              case 2:
                if (!(!methodName || typeof methodName !== 'string')) {
                  _context.next = 4;
                  break;
                }

                throw new Error('Method Name must be provided and must be a string.');

              case 4:
                if (typeof options === 'string') {
                  options = {
                    executionType: options
                  };
                }

                if (typeof parameters === 'string' && (0, _constants.isExecutionType)(parameters)) {
                  options = {
                    executionType: parameters
                  };
                  parameters = undefined;
                }

                options = options || {};
                headers = _objectSpread({}, options.httpRequestHeaders);

                if (options.executionType) {
                  headers[_constants.EXECUTION_TYPE_HEADER] = options.executionType;
                }

                return _context.abrupt("return", this.app.request.post({
                  url: this.app.urls.blServiceMethod(serviceName, methodName),
                  data: parameters,
                  headers: headers
                }));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function invoke(_x, _x2, _x3, _x4) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }]);
  return CustomServices;
}();

exports["default"] = CustomServices;